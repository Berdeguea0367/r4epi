[
["index.html", "R for Epidemiology Welcome", " R for Epidemiology Brad Cannell 2020-05-17 Welcome Welcome to R for Epidemiology! This electronic book was originally created to accompany my Introduction to R Programming for Epidemiologic Research course at the University of Texas Health Science Center School of Public Health. However, I hope it will be useful to anyone who is interested in R and epidemiology. This book was created by Brad Cannell and is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. Other Reading You may also be interested in: Hands-on Programming with R by Garrett Grolemund. This book is designed to provide a friendly introduction to the R language. R for Data Science by Garrett Grolemund and Hadley Wickham. This book is designed to teach readers how to do data science with R. Statistical Inference via Data Science: A ModernDive inot R and the Tidyverse. This book is designed to be a gentle introduction to the practice of analyzing data and answering questions using data the way data scientists, statisticians, data journalists, and other researchers would. Reproducable Research with R and RStudio by Christopher Gandrud. This book gives you tools for data gathering, analysis, and presentation of results so that you can create dynamic and highly reproducible research. Advanced R by Hadley Wickham. This book is designed primarily for R users who want to improve their programming skills and understanding of the language. "],
["about-the-author.html", "About the Author", " About the Author Brad Cannell, PhD, MPH Associate Professor Department of Epidemiology, Human Genetics and Environmental Sciences University of Texas Health Science Center School of Public Health Dr. Cannell received his PhD in Epidemiology, and Graduate Certificate in Gerontology, in 2013 from the University of Florida. He received his MPH with a concentration in Epidemiology from the University of Louisville in 2009, and his BA in Political Science and Marketing from the University of North Texas in 2005. During his doctoral studies, he was a Graduate Research Assistant for the Florida Office on Disability and Health, an affiliated scholar with the Claude D. Pepper Older Americans Independence Center, and a student-inducted member of the Delta Omega Honorary Society in Public Health. In 2016, Dr. Cannell received a Graduate Certificate in Predictive Analytics from the University of Maryland University College, and a Certificate in Big Data and Social Analytics from the Massachusetts Institute of Technology. He previously held professional staff positions in the Louisville Metro Health Department and the Northern Kentucky Independent District Health Department. He spent three years as a project epidemiologist for the Florida Office on Disability and Health at the University of Florida. He also served as an Environmental Science Officer in the United States Army Reserves from 2009 to 2013. Dr. Cannell‚Äôs research is broadly focused on healthy aging and health-related quality of life. Specifically, he has published research focusing on preservation of physical and cognitive function, living and aging with disability, and understanding and preventing elder mistreatment. Additionally, he has a strong background and training in epidemiologic methods and predictive analytics. He has been principal or co-investigator on multiple trials and observational studies in community and healthcare settings. He is currently the principal investigator on multiple data-driven federally funded projects that utilize technological solutions to public health issues in novel ways. Contact Email Brad Cannell Brad Cannell‚Äôs LinkedIn Profile Brad Cannell‚Äôs Github page "],
["introduction.html", "Introduction", " Introduction Goals I‚Äôm going to start the introduction by writing down some basic goals that underlie the construction and content of this book. I‚Äôm writing this for you, the reader, but also to hold myself accountable as I write. So, feel free to read if you are interested or skip ahead if you aren‚Äôt. The goals of this book are: To teach you how to use R and RStudio as tools for applied epidemiology. It is not to turn you into a computer scientist or a hard-core R programmer. Therefore, some readders who are experienced programmers may catch some technical inacuracies on what I consider to be the fine points of what R is doing ‚Äúunder the hood.‚Äù To make this writing as accessible and practically useful as possible without stripping out all of the complexity that makes doing epidemiology in real life a challenge. In other words, I‚Äôm going to try to give you all the tools you need to do epidemiology in ‚Äúreal world‚Äù (as opposed to ideal) conditions without providing a whole bunch of extraneous (often theoretical) stuff that detracts from doing. Having said that, I will strive to add links to the other (often theoretical) stuff for readers who are interested. To teach you to accomplish common tasks, rather than teach you to use functions. In many R courses and texts, I‚Äôve noticed a focus on learning all the things a function, or set of related functions, can do. It‚Äôs then up to you, the reader, to sift through all of these capabilities and decided which, if any, of the things that can be done will accomplish the tasks that you are actually trying to accomplish. Instead, I will strive to start with the end in mind. What is the task we are actually trying to accomplish? What are some functions/methods I could use to accomplish that task? What are the strengths and limitations of each? To start each concept with the end result and then deconstruct how we arrived at that result, where possible. I find that it is easier for me to understand new concepts when learning them as a component of a final product. To learn concepts with data instead of (or alongside) mathematical formulas and text descriptions, where possible. I find that it is easier for me to understand new concepts by seeing them in action. Text conventions used in this book Bold text is used to highlight important terms, URLs, email addresses, filenames, and file extensions. Highlighted inline code is used to emphasize small sections of R code, program elements such as variable or function names, databases, data types, environment variables, statements, and keywords. "],
["installing-r-and-rstudio.html", "1 Installing R and RStudio 1.1 Download and install on a Mac 1.2 Download and install on a PC", " 1 Installing R and RStudio Before we can do any programming with R, we first have to download it to your computer. Fortunately, R is free, easy to install, and runs on all major operating systems (i.e., Mac and Windows). However, R by itself is not nearly as easy to use as when we combine it with another program called RStudio. Fortunately, RStudio is also free and will also run on all major operating systems. At this point, you may be wondering what R is, what RStudio is, and how they are related. We will answer those questions in the near future. However, in the interest of keeping things brief and simple, I‚Äôm not going to get into them right now. Instead, all you have to worry about is getting the R programming language and the RStudio IDE (IDE is short for interactive development environment) downloaded and installed on your computer. The steps involved are slightly different depending on whether you are using a Mac or a PC (i.e., Windows). Therefore, please feel free to use the navigation panel on the left-hand side of the screen to navigate directly to the instructions that you need for your computer. üóíSide note: In this chapter, I cover how to download and install R and RStudio on both Mac and PC. However, I personally use a Mac; therefore, the screenshots in all following chapters will be from a Mac. The good news is that RStudio operates almost identically on Mac and PC. Step 1: Regardless of which operating system you are using, please make sure your computer is on, properly functioning, connected to the internet, and has enough space on your hard drive to save R and RStudio. 1.1 Download and install on a Mac Step 2: Navigate to the Comprehensive R Archive Network (CRAN), which is located at https://cran.r-project.org/. Step 3: Click on Download R for (Mac) OS X. Step 4: Click on the link for the latest version of R. As you are reading this, the newest version may be different than the version you see in this picture, but the location of the newest version should be roughly in the same place ‚Äì the middle of the screen under ‚ÄúLatest release:‚Äù. After clicking the link, R should start to download to your computer automatically. Step 5: Locate the package file you just downloaded and double click it. Unless you‚Äôve changed your download settings, this file will probably be in your ‚Äúdownloads‚Äù folder. That is the default location for most web browsers. After you locate the file, just double click it. Step 6: A dialogue box will open and ask you to make some decisions about how and where you want to install R on your computer. I typically just click ‚Äúcontinue‚Äù at every step without changing any of the default options. If R installed properly, you should now see it in your applications folder. Step 7: Now we need to install the RStudio IDE. To do this, navigate to the RStudio desktop download website, which is located at https://rstudio.com/products/rstudio/download/. On that page, click the download button under RStudio Desktop Open Source License Free. Step 8: Download the most current version for Mac. Step 9: Again, locate the dmg file you just downloaded and double click it. Unless you‚Äôve changed your download settings, this file should be in the same location as the R package file you already downloaded. Step 10: A new finder window should automatically pop up that looks like the one you see here. Click on the RStudio icon and drag it into the Applications folder. You should now see RStudio in your Applications folder. Double click the icon to open RStudio. If this warning pops up, just click Open. The RStudio IDE should open and look something like the window you see here. If so, you are good to go! üéâ 1.2 Download and install on a PC Step 2: Navigate to the Comprehensive R Archive Network (CRAN), which is located at https://cran.r-project.org/. Step 3: Click on Download R for Windows. Step 4: Click on the base link. Step 5: Click on the link for the latest version of R. As you are reading this, the newest version may be different than the version you see in this picture, but the location of the newest version should be roughly the same. After clicking, R should start to download to your computer. Step 6: Locate the installation file you just downloaded and double click it. Unless you‚Äôve changed your download settings, this file will probably be in your downloads folder. That is the default location for most web browsers. Step 7: A dialogue box will open that asks you to make some decisions about how and where you want to install R on your computer. I typically just click ‚ÄúNext‚Äù at every step without changing any of the default options. If R installed properly, you should now see it in the Windows start menu. Step 8: Now we need to install the RStudio IDE. To do this, navigate to the RStudio desktop download website, which is located at https://rstudio.com/products/rstudio/download/. On that page, click the download button under RStudio Desktop Open Source License Free. Step 9: Download the most current version for Windows. Step 10: Again, locate the installation file you just downloaded and double click it. Unless you‚Äôve changed your download settings, this file should be in the same location as the R installation file you already downloaded. Step 11: Another dialogue box will open and ask you to make some decisions about how and where you want to install RStudio on your computer. I typically just click ‚ÄúNext‚Äù at every step without changing any of the default options. When RStudio is finished installing, you should see RStudio in the Windows start menu. Click the icon to open RStudio. The RStudio IDE should open and look something like the window you see here. If so, you are good to go! üéâ "],
["what-is-r.html", "2 What is R? 2.1 What is data? 2.2 What is R?", " 2 What is R? At this point in the book, you should have installed R and RStudio on your computer, but you may be thinking to yourself, ‚ÄúI don‚Äôt even know what R is.‚Äù Well, in this chapter you‚Äôll find out. I‚Äôll start with an overview of the R language, and then briefly touch on its capabilities and uses. You‚Äôll also see a complete R program and some complete documents generated by R programs. In this book you‚Äôll learn how to create similar programs and documents, and by the end of the book you‚Äôll be able to write your own R programs and present your results in the form of an issue brief written for general audiences who may or may not have public health expertise. But, before we discuss R let‚Äôs discuss something even more basic ‚Äì data. Here‚Äôs a question for you: What is data? 2.1 What is data? Data is information about objects (e.g., people, places, schools) and observable phenomenon (e.g., weather, temperatures, and disease symptoms) that is recorded and stored somehow as a collection of symbols, numbers, and letters. So, data is just information that has be ‚Äúwritten‚Äù down. Here we have a table, which is a common way of organizing data. In R, we will typically refer to these tables as data frames. Each box is a data frame is called a cell. Moving from left to right across the data frame are columns. Columns are also sometimes referred to as variables. In this book, we will often use the terms columns and variables interchangeably. Each column in a data frame has one, and only one, type. For now, know that the type tells us what kind of data is contained in a column and what we can do with that data. You may have already noticed that 3 of the columns in the table we‚Äôve been looking at contain numbers and 1 of the columns contains words. These columns will have different types in R and we can do different things with them based on their type. For example, we could ask R to tell us what the average value of the numbers in the height column are, but it wouldn‚Äôt make sense to ask R to tell us the average value of the words in the Gender column. We will talk more about many of the different column types exist in R later in this book. The information contained in the first cell of each column is called the column name (or variable) name. R gives us a lot of flexibility in terms of what we can name our columns, but there are a few rules. Column names can contain letters, numbers and the dot (.) or underscore (_) characters. Additionally, they can begin with a letter or a dot ‚Äì as long as the dot is not followed by a number. So, a name like ‚Äú.2cats‚Äù is not allowed. Finally, R has some reserved words that you are not allowed to use for column names. These include: ‚Äúif‚Äù, ‚Äúelse‚Äù, ‚Äúrepeat‚Äù, ‚Äúwhile‚Äù, ‚Äúfunction‚Äù, ‚Äúfor‚Äù, ‚Äúin‚Äù, ‚Äúnext‚Äù, and ‚Äúbreak‚Äù. Moving from top to bottom across the table are rows, which are sometimes referred to as records. Finally, the contents of each cell are called values. You should now be up to speed on some basic terminology used by R, as well as other analytic, database, and spreadsheet programs. These terms will be used repeatedly throughout the course. 2.2 What is R? So, what is R? Well, R is an open source statistical programming language that was created in the 1990‚Äôs specifically for data analysis. We will talk more about what open source means later, but for now, just think of R as an easy (relatively üòÇ) way to ask your computer to do math and statistics for you. More specifically, by the end of this book you will be able to independently use R to access data, manage data, analyze data, and present the results of your analysis. Let‚Äôs quickly take a closer look at each of these. 2.2.1 Accessing data So, what do we mean by ‚Äúaccess data‚Äù? Well, individuals and organizations store their data using different computer programs that use different file types. Some common examples that you may come across in epidemiology are database files, spreadsheets, raw data files, and SAS data sets. No matter how the data is stored, you can‚Äôt do anything with it until you can get it into R, in a form that R can use, and in a location that you can reach. In other words, accessing your data. Therefore, among our first tasks in this course will be to access data. 2.2.2 Managing data This isn‚Äôt very specific, but managing data is all the things you may have to do to your data to get it ready for analysis. You may also hear people refer to this process as data wrangling or data munging. Some specific examples of data management tasks include: Validating and cleaning data. In other words, dealing with potential errors in the data. Subsetting data. For example, using only some of the columns or some of the rows. Creating new variables. For example, creating a BMI variable in a data frame that was sent to you with height and weight columns. Combining data frames. For example, combining sociodemographic data about study participants with data collected in the field during an intervention. You may sometimes hear people refer to the 80/20 rule in reference to data management. This ‚Äúrule‚Äù says that in a typical data analysis project, roughly 80% of your time will be spent on data management and only 20% will be spent on the analysis itself. I can‚Äôt provide you with any empirical evidence (i.e., data) to back this claim up. But, as a person who has been involved in many projects that involve the collection and analysis of data, I can tell you anecdotally that this ‚Äùrule‚Äù is probably pretty close to being accurate in most cases. Additionally, it‚Äôs been my experience that most students of epidemiology are required to take one or more classes that emphasize methods for analyzing data; however, almost none of them have taken a course that emphasizes data management! Therefore, because data management is such a large component of most projects that involve the collection and analysis of data, and because most readers will have already been exposed to data analysis to a much greater extent than data management, this course will heavily emphasize the latter. 2.2.3 Analyzing data As just discussed, this is probably the capability you most closely associate with R, and there is no doubt that R is a powerful tool for analyzing data. However, in this book we won‚Äôt go beyond using R to calculate basic descriptive statistics. For our purposes, descriptive statistics include: Measures of central tendency. For example, mean, median, and mode. Measures of dispersion. For example, variance and standard error. Measures for describing categorical variables. For example, counts and percentages. Describing data using graphs and charts. With R, we can describe our data using beautiful and informative graphs. 2.2.4 Presenting data And finally, the ultimate goal is typically to present your findings in some form or another. For example, a report, a website, or a journal article. With R you can present your results in many different formats with relative ease. In fact, this is one of my favorite things about R and RStudio. In this class you will learn how to take your text, tabular, or graphical results and then publish them in many different formats including Microsoft Word, html files that can be viewed in web browsers, and pdf documents. Let‚Äôs take a look at some examples. Microsoft Word documents. Click here to view an example report created for one of my research projects in Microsoft Word. PDF documents. Click here to view a data dictionary I created in PDF format. HTML files. Hypertext Markup Language (HTML) files are what you are looking at whenever you view a webpage. You can use are to create HTML files that others can view in their web browser. You can email them these files to view in their web browser, or you can make them available for others to view online just like any other website. Click here to view an example dashboard I created for one of my research projects. Web applications. You can even use R to create full-fledged web applications. View the RStudio website to see some examples. "],
["navigating-the-rstudio-interface.html", "3 Navigating the RStudio interface 3.1 The console 3.2 The environment pane 3.3 The files pane 3.4 The source pane 3.5 RStudio preferences", " 3 Navigating the RStudio interface You now have R and RStudio on your computer and you have some idea of what R and RStudio are. At this point, it is really common for people to open RStudio and get totally overwhelmed. ‚ÄúWhat am I looking at?‚Äù ‚ÄùWhat do I click first?‚Äù ‚ÄúWhere do I even start?‚Äù Don‚Äôt worry if these, or similar, thoughts have crossed your mind. You are in good company and we will start to clear some of them up in this chapter. When you first load RStudio you should see a screen that looks very similar to what you see in the picture below. 3.1 In the current view, you see three panes and each pane has multiple tabs. Don‚Äôt beat yourself up if this isn‚Äôt immediately obvious. I‚Äôll make it clearer soon. Figure 3.1: The default RStudio user interface. 3.1 The console The first pane we are going to talk about is the Console/Terminal/Jobs pane. 3.2 Figure 3.2: The R console. It‚Äôs called the Console/Terminal/Jobs pane because it has three tabs you can click on: Console, Terminal, and Jobs. However, we will mostly refer to it as the Console pane and we will mostly ignore the Terminal and Jobs tabs. We aren‚Äôt ignoring them because they aren‚Äôt useful; rather, we are ignoring them because using them isn‚Äôt essential for anything we discuss anytime soon, and I want to keep things as simple as possible. The console is the most basic way to interact with R. You can type a command to R into the console prompt (the prompt looks like ‚Äú&gt;‚Äù) and R will respond to what you type. For example, below I‚Äôve typed ‚Äú1 plus 1,‚Äù hit enter, and the R console returned the sum of the numbers 1 and 1. 3.3 Figure 3.3: Doing some addition in the R console. The number 1 you see in brackets before the 2 (i.e., [1]) is telling you that this line of results starts with the first result. That fact is obvious here because there is only one result. To make this idea clearer, let‚Äôs show you a result with multiple lines. Figure 3.4: Demonstrating a function that returns multiple results. In the screenshot above we see a couple new things demonstrated. 3.4 First, as promised, we have more than one line of results (or output). The first line of results starts with a 1 in brackets (i.e., [1]), which indicates that this line of results starts with the first result. In this case the first result is the number 2. The second line of results starts with a 29 in brackets (i.e., [29]), which indicates that this line of results starts with the twenty-ninth result. In this case the twenty-ninth result is the number 58. If you count the numbers in the first line, there should be 28 ‚Äì results 1 through 28. I also want to make it clear that ‚Äú1‚Äù and ‚Äú29‚Äù are NOT results themselves. They are just helping us count the number of results per line. The second new thing here that you may have noticed is our use of a function. Functions are a BIG DEAL in R. So much so that R is called a functional language. You don‚Äôt really need to know all the details of what that means; however, you should know that, in general, everything you do in R you will do with a function. By contrast, everything you create in R will be an object. If you wanted to make an analogy between the R language and the English language, functions are verbs ‚Äì they do things ‚Äì and objects are nouns ‚Äì they are things. This may be confusion right now. Don‚Äôt worry. It will become clearer soon. Most functions in R begin with the function name followed by parentheses. For example, seq(), sum(), and mean(). Question: What is the name of the function we used in the example above? It‚Äôs the seq() function ‚Äì short for sequence. Inside the function, you may notice that there are three pairs of words, equal symbols, and numbers that are separated by commas. They are, from = 2, to = 100, and by = 2. In this case, from, to, and by are all arguments to the seq() function. I don‚Äôt know why they are called arguments, but as far as we are concerned, they just are. We will learn more about functions and arguments later, but for now just know that arguments give functions the information they need to give us the result we want. In this case, the seq() function gives us a sequence of numbers, but we have to give it information about where that sequence should start, where it should end, and how many steps should be in the middle. Here the sequence begins with the value we gave to the from argument (i.e., 2), ends with the value we gave to the to argument (i.e., 100), and increases at each step by the number we gave to the by argument (i.e., 2). So, 2, 4, 6, 8 ‚Ä¶ 100. While it‚Äôs convenient, let‚Äôs also learn some programming terminology: Arguments: Arguments always go inside the parentheses of a function and give the function the information it needs to give us the result we want. Pass: In programming lingo, you pass a value to a function argument. For example, in the function call seq(from = 2, to = 100, by = 2) we could say that we passed a value of 2 to the from argument, we passed a value of 100 to the to argument, and we passed a value of 2 to the by argument. Returns: Instead of saying, ‚Äúthe seq() function gives us a sequence of numbers‚Ä¶‚Äù we could say, ‚Äúthe seq() function returns a sequence of numbers‚Ä¶‚Äù In programming lingo, functions return one or more results. üóí Side note: The seq() function isn‚Äôt particularly important or noteworthy. I essentially chose it at random to illustrate some key points. However, arguments, passing values, and return values are extremely important concepts and we will return to them many times. 3.2 The environment pane The second pane we are going to talk about is the Environment/History/Connections pane. 3.5 However, we will mostly refer to it as the Environment pane and we will mostly ignore the History and Connections tab. We aren‚Äôt ignoring them because they aren‚Äôt useful; rather, we are ignoring them because using them isn‚Äôt essential for anything we will discuss anytime soon, and I want to keep things as simple as possible. Figure 3.5: The environment pane. The Environment pane shows you all the objects that R can currently use for data management or analysis. In this picture, 3.5 our environment is empty. Let‚Äôs create an object and add it to our Environment. Figure 3.6: The vector x in the global environment. Here we see that we created a new object called x, which now appears in our Global Environment. 3.6 This gives us another great opportunity to discuss some new concepts. First, we created the x object in the Console by assigning the value 2 to the letter x. We did this by typing ‚Äúx‚Äù followed by a less than symbol (&lt;), a dash symbol (-), and the number 2. R is kind of unique in this way. I have never seen another programming language (although I‚Äôm sure they are out there) that uses &lt;- to assign values to variables. By the way, &lt;- is called the assignment operator (or assignment arrow), and ‚Äùassign‚Äù here means ‚Äúmake x contain 2‚Äù or ‚Äúput 2 inside x.‚Äù In many other languages you would write that as x = 2. But, for whatever reason, in R it is &lt;-. Unfortunately, &lt;- is more awkward to type than =. Fortunately, RStudio gives us a keyboard shortcut to make it easier. To type the assignment operator in RStudio, just hold down Option + - (dash keey) on a Mac or Alt + - (dash key) on a PC and RStudio will insert &lt;- complete with spaces on either side of the arrow. This may still seem awkward at first, but you will get used to it. üóí A side note about using the letter ‚Äúx‚Äù: By convention, the letter ‚Äúx‚Äù is a widely used variable name. You will see it used a lot in example documents and online. However, there is nothing special about the letter x. We could have just as easily used any other letter (a &lt;- 2), word (variable &lt;- 2), or descriptive name (my_favorite_number &lt;- 2) that is allowed by R. Second, you can see that our Global Environment now includes the object x, which has a value of 2. In this case, we would say that x is a numeric vector of length 1 (i.e., it has one value stored in it). We will talk more about vectors and vector types soon. For now, just notice that objects that you can manipulate or analyze in R will appear in your Global Environment. üóí‚ÄºÔ∏è Side note: R is a case sensitive language. That means that upper case x (X) and lower case x (x) are different things to R. So, if you assign 2 to lower case x (x &lt;- 2). And then later ask R to tell what number you stored in upper case X, you will get an error (Error: object 'X' not found). 3.3 The files pane Next, let‚Äôs talk about the Files/Plots/Packages/Help/Viewer pane (that‚Äôs a mouthful). 3.7 Figure 3.7: The Files/Plots/Packages/Help/Viewer pane. Again, some of these tabs are more applicable for us than others. For us, the files tab and the help tab will probably be the most useful. You can think of the files tab as a mini Finder window (for Mac) or a mini File Explorer window (for PC). The help tab is also extremely useful once you get acclimated to it. Figure 3.8: The help tab. For example, in the screenshot above 3.8 we typed the seq into the search bar. The help pane then shows us a page of documentation for the seq() function. The documentation includes a brief description of what the function does, outlines all the arguments the seq() function recognizes, and, if you scroll down, gives examples of using the seq() function. Admittedly, this help documentation can seem a little like reading Greek (assuming you don‚Äôt speak Greek) at first. But, you will get more comfortable using it with practice. I hated the help documentation when I was learning R. Now, I use it all the time. 3.4 The source pane There is actually a fourth pane available in RStudio. If you click on the icon shown below you will get the following dropdown box with a list of files you can create. 3.9 Figure 3.9: Click the new source document icon. If you click any of these options, a new pane will appear. I will arbitrarily pick the first option ‚Äì R Script. Figure 3.10: New source document options. When I do, a new pane appears. It‚Äôs called the source pane. In this case, the source pane contains an untitled R Script. We won‚Äôt get into the details now because I don‚Äôt want to overwhelm you, but soon you will do the majority of your R programming in the source pane. Figure 3.11: A blank R script in the source pane. 3.5 RStudio preferences Finally, I‚Äôm going to recommend that you change a few settings in RStudio before we move on. Start by going to RStudio -&gt; Preferences (on Mac) 3.12 Figure 3.12: Select the preferences menu on Mac. Or start by going to Tools -&gt; Global Options (on Windows) 3.13 Figure 3.13: Select the global options menu on Windows. In the ‚ÄúGeneral‚Äù tab, I recommend unchecking the ‚ÄúRestore .Rdata into workspace at startup‚Äù checkbox. I also recommend setting the ‚ÄúSave workspace .Rdata on exit‚Äù dropdown to ‚ÄúNever.‚Äù Finally, I recommend unchecking the ‚ÄúAlways save history (even when not saving .Rdata)‚Äù checkbox. 3.14 Figure 3.14: General options tab. On the ‚ÄúAppearance‚Äù tab, I‚Äôm going to change my Editor Theme to Twilight. It‚Äôs not so much that I‚Äôm recommending you change yours ‚Äì this is entirely personal preference ‚Äì I‚Äôm just letting you know why my screenshots will look different from here on out. 3.15 Figure 3.15: Appearance tab. I‚Äôm sure you still have lots of questions at this point. That‚Äôs totally natural. However, I hope you now feel like you have some idea of what you are looking at when you open RStudio. Most of you will naturally get more comfortable with RStudio as we move through the book. For those of you who want more resources now, here are some suggestions. RStudio IDE cheatsheet ModernDive: What are R and RStudio? "],
["speaking-rs-language.html", "4 Speaking R‚Äôs language 4.1 R is a language 4.2 The R interpreter 4.3 Errors 4.4 Functions 4.5 Objects 4.6 Comments 4.7 Packages 4.8 Programming style", " 4 Speaking R‚Äôs language Students taking my R for epidemiology course often come into the course thinking it will be a math or statistics course. In reality, this course is probably much closer to a foreign language course. There is no doubt that we need a foundational understanding of math and statistics to understand the results we get from R, but R will take care of all of the complicated stuff for us. All we have to do is learn how to ask R to do what we want it to do. To some extent, this entire book is about learning to communicate with R. So, in this chapter we will introduce the R programming language from the 30,000-foot level. 4.1 R is a language In the same way that many people use the English language to communicate with each other, we will use the R programming language to communicate with R. Just like the English language, the R language comes complete with its own structure and vocabulary. Unfortunately, just like the English language, it also includes some weird exceptions and occasional miscommunications. We‚Äôve already seen a couple examples of commands written to R in the R programming language. Specifically: # Store the value 2 in the variable x x &lt;- 2 # Print the contents of x to the screen x ## [1] 2 and # Print an example number sequence to the screen seq(from = 2, to = 100, by = 2) ## [1] 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 ## [20] 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 ## [39] 78 80 82 84 86 88 90 92 94 96 98 100 üóí Side note: The gray the boxes you see above are called R code chunks and I created them (and this entire book) using something called R markdown documents. Can you believe that you can write an entire book with R and RStudio? How cool is that? You will learn to use R markdown documents later in the workflow basics portion of this book. R markdown is great because it allows you to mix R code with narrative text and multimedia content as I‚Äôve done throughout the page you‚Äôre currently looking at. This makes it really easy for us to add context and aesthetic appeal to our results. 4.2 The R interpreter Question: I keep talking about ‚Äúspeaking‚Äù to R, but when you speak to R using the R language, who are you actually speaking to? Well, you are speaking to something called the R interpreter. The R interpreter takes the commands we‚Äôve written in the R language, sends them to your computer to do the actual work (e.g., get the mean of a set of numbers), and then translates the results of that work back to us in a form that we humans can understand (e.g., the mean is 25.5). At this stage, one of the key concepts for you to understand about the R language is that is extremely literal! Understanding the literal nature of R is important because it will be the underlying cause of a lot of errors in your R code. 4.3 Errors No matter what I write next, you are going to get errors in your R code. I still get errors in my R code every single time I write R code. However, my hope is that this section will help you begin to understand why you are getting errors when you get them and provide us with a common language for discussing errors. So, what exactly do I mean when I say that the R interpreter is extremely literal? Well, in the Navigating RStudio chapter I already told you that R is a case sensitive language. Again, that means that upper case x (X) and lower-case x (x) are different things to R. So, if you assign 2 to lower case x (x &lt;- 2). And then later ask R to tell what number you stored in upper case X; you will get an error (Error: object 'X' not found). x &lt;- 2 X ## Error in eval(expr, envir, enclos): object &#39;X&#39; not found Specifically, this is an example of a logic error. Meaning, R understands what you are asking it to do ‚Äì you want it to print the contents of the upper-case X object to the screen. However, it can‚Äôt complete your request because you are asking it to do something that doesn‚Äôt logically make sense ‚Äì print the contents of a thing that doesn‚Äôt exist. Remember, R is literal, and it will not try to guess that you actually meant to ask it to print the contents of lower-case x. Another general type of error is known as a syntax error. In programming languages, syntax refers to the rules of the language. You can sort of think of this as the grammar of the language. In English, I could say something like, ‚Äúgiving dog water drink.‚Äù This sentence is grammatically completely incorrect; however, most of you would roughly be able to figure out what I‚Äôm asking you to do based on your life experience and knowledge of the situational context. The R interpreter, as awesome as it is, would not be able to make an assumption about what I want it to do. There would either be one, and only one, preprogrammed correct response to such a request, or the R interpreter would say, ‚ÄúI don‚Äôt know what you‚Äôre asking me to do.‚Äù When the R interpreter says, ‚ÄúI don‚Äôt know what you‚Äôre asking me to do,‚Äù you‚Äôve made a syntax error. Throughout the rest of the book, I will try to point out situations where R programmers often encounter errors and how you may be able to address them. The remainder of this chapter will discuss some key components of R‚Äôs syntax and the data structures (i.e., ways of storing data) that the R syntax interacts with. 4.4 Functions R is a functional programming language, which simply means that functions play a central role in the R language. But what are functions? Well, factories are a common analogy used to represent functions. In this analogy, arguments are raw material inputs that go into the factory. For example, steel and rubber. The function is the factory where all the work takes place ‚Äì converting raw materials into the desired output. Finally, the factory output represents the returned results. In this case, bicycles. Figure 4.1: A factory making bicycles. To make this concept more concrete, in the Navigating RStudio chapter we used the seq() function as a factory. Specifically, we wrote seq(from = 2, to = 100, by = 2). The inputs (arguments) were from, to, and by. The output (returned result) was a set of numbers that went from 2 to 100 by 2‚Äôs. Most functions, like the seq() function, will be a word or word part followed by parentheses. Other examples are the sum() function for addition and the mean() function to calculate the average value of a set of numbers. Figure 4.2: A function factory making numbers. 4.5 Objects In addition to functions, the R programming language also includes objects. In the Navigating RStudio chapter we created an object called x with a value of 2 using the x &lt;- 2 R code. In general, you can think of objects as anything that lives in your R global environment. Objects may be single variables (also called vectors in R) or entire data sets (also called data frames in R). Objects can be a confusing concept at first. I think it‚Äôs because it‚Äôs is hard to precisely define exactly what an object is. I‚Äôll say two things about this. First, you‚Äôre probably overthinking it. When we use R, we create and save stuff. We have to call that stuff something in order to talk about it or write books about it. Somebody decided we would call that stuff ‚Äúobjects.‚Äù The second thing I‚Äôll say is that this becomes much less abstract when we finally get to a place where you can really get your hands dirty doing some R programming. Figure 4.3: Creating the x object. Sometimes it can be useful to relate the R language to English grammar. That is, when you are writing R code you can roughly think of functions as verbs and objects as nouns. Just like nouns are things in the English language, and verbs do things in the English language, objects are things and functions do things in the R language. So, in the x &lt;- 2 command x is the object and &lt;- is the function. ‚ÄúWait! Didn‚Äôt you just tell us that functions will be a word followed by parentheses?‚Äù Fair question. Technically, I said, ‚ÄúMost functions will be a word, or word part, followed by parentheses.‚Äù Just like English, R has exceptions. All operators in R are also functions. Operators are symbols like +, -, =, and &lt;-. There are many more operators, but you will notice that they all do things. In this case, they add, subtract, and assign values to objects. 4.6 Comments And finally, there are comments. If our R code is a conversation we are having with the R inteepretter, then comments are your inner thoughts taking place during the conversation. Comments don‚Äôt actually mean anything to R, but they will be extremely important for you. You actually already saw a couple examples of comments above. # Store the value 2 in the variable x x &lt;- 2 # Print the contents of x to the screen x ## [1] 2 In this code chunk, ‚Äú# Store the value 2 in the variable x‚Äù and ‚Äú# Print the contents of x to the screen‚Äù are both examples of comments. Notice that they both start with the pound or hash sign (#). The R interpreter will ignore anything on the current line that comes after the hash sign. A carriage return (new line) ends the comment. However, comments don‚Äôt have to be written on their own line. They can also be written on the same line as R code as long as put them after the R code, like this: x &lt;- 2 # Store the value 2 in the variable x x # Print the contents of x to the screen ## [1] 2 Most beginning R programmers underestimate the importance of comments. In the silly little examples above, the comments are not that useful. However, comments will become extremely important as you begin writing more complex programs. When working on projects, you will often need to share your programs with others. Reading R code without any context is really challenging ‚Äì even for experienced R programmers. Additionally, even if your collaborators can surmise what your R code is doing, they may have no idea why you are doing it. Therefore, your comments should tell others what your code does (if it isn‚Äôt completely obvious), and more importantly, what your code is trying to accomplish. Even if you aren‚Äôt sharing your code with others, you may need to come back and revise or reuse your code months or years down the line. You may be shocked at how foreign the code you wrote will seem months or years after you wrote it. Therefore, comments are just important for others, they are important for future you! 4.7 Packages In addition to being a functional programming language, R is also a type of programming language called an open source programming language. For our purposes, this has two big advantages. First, it means that R is FREE! Second, it means that smart people all around the world get to develop new packages for the R language that can do cutting edge and/or very niche things. That second advantage is probably really confusing if this is not a concept you are already familiar with. For example, when you install Microsoft Word on your computer all the code that makes that program work is owned and Maintained by the Microsoft corporation. If you need Word to do something that it doesn‚Äôt currently do, your only option is really to make a feature request on Microsoft‚Äôs website. R works a little differently. When you downloaded R from the CRAN website, you actually download something called Base R. Base R maintained by the R Core Team. However, anybody ‚Äì even you ‚Äì can write your own code (called packages) that add new functions to the R syntax. Like all functions, these new functions allow you to do things that you can‚Äôt do (or can‚Äôt do as easily) with Base R. An analogy that I really like here is used by Ismay and Kim in ModernDive. A good analogy for R packages is they are like apps you can download onto a mobile phone. So R is like a new mobile phone: while it has a certain amount of features when you use it for the first time, it doesn‚Äôt have everything. R packages are like the apps you can download onto your phone from Apple‚Äôs App Store or Android‚Äôs Google Play. 1 So, when you get a new smart phone it comes with apps for making phone calls, checking email, and sending text messages. But, what if you want to listen to music on Spotify? You may or may not be able to do that through your phone‚Äôs web browser, but it‚Äôs way more convenient and powerful to download and install the Spotify app. In this course, we will make extensive use of packages developed by people and teams outside of the R Core Team. In particular, we will use a number of related packages that are collectively known as the Tidyverse. One of the most popular packages in the tidyverse collection (and one of the most popular R packages overall) is called the dplyr package for data management. In the same way that you have to download and install Spotify on your mobile phone before you can use it, you have to download and install new R packages on your computer before you can use the functions they contain. Fortunately, R makes this really easy. For most packages, all you have to do is run the install.packages() function in the R console. For example, here is how you would install the dplyr package. # Make sure you remember to wrap the name of the package in single or double quotes. install.packages(&quot;dplyr&quot;) Over time, you will download and install a lot of different packages. All those packages with all of those new functions start to create a lot of overhead. Therefore, R doesn‚Äôt keep them loaded and available for use at all times. Instead, every time you open RStudio, you will have to explicitly tell R which packages you want to use. So, when you close RStudio and open it again, the only functions that you will be able to use are Base R functions. If you want to use functions from any other package (e.g., dplyr) you will have to tell R that you want to do so using the library() function. # No quotes needed here library(dplyr) Technically, loading the package with the library() function is not the only way to use a function from a package you‚Äôve downloaded. For example, the dplyr package contains a function called filter() that helps us keep or drop certain rows in a data frame. To use this function, we have to first download the dplyr package. Then we can use the filter function in one of two different ways. library(dplyr) filter(states_data, state == &quot;Texas&quot;) # Keeps only the rows from Texas The first way you already saw above. Load all the functions contained in the dplyr package using the library() function. Then use that function just like any other Base R function. The second way is something called the double colon syntax. To use the double colon syntax, you type the package name, two colons, and the name of the function you want to use from the package. Here is an example of the double colon syntax. dplyr::filter(states_data, state == &quot;Texas&quot;) # Keeps only the rows from Texas Most of the time you will load packages using the library() function. However, I wanted to show you the double colon syntax because you may come across it when you are reading R documentation and because there are times when it makes sense to use this syntax. 4.8 Programming style Finally, I want to discuss programming style. R can read any code your write as long as your write it using valid R syntax. However, R code can be much easier or harder for people (including you) to read depending on how it‚Äôs written. Appendix A: Style Guide of this book gives complete details on writing R code that is as easy as possible for people to read. So, please make sure to read. It will make things so much easier for all of us! References "],
["lets-get-programming.html", "5 Let‚Äôs get programming", " 5 Let‚Äôs get programming Let‚Äôs do it! Let‚Äôs look at a couple more examples to make this idea more concrete. df &lt;- data.frame( name = c(&quot;John&quot;, &quot;Sally&quot;, &quot;Brad&quot;), sick = c(1, 0, 0) ) The code chunk above creats a data frame. As we discussed in the the what is R chapter, ‚Äúdata frame‚Äù is just R‚Äôs term for a data set ‚Äì data organized into rows and columns. "],
["overview.html", "6 Overview 6.1 Measurement 6.2 Descriptive analysis", " 6 Overview 6.1 Measurement Measurement: We typically evaluate and quantify our intuition about health and disease with numbers. This could be relative to anecdotes. Surely, the one person who happened to survive cancer through a diet exclusively of honey could have had an article written about them. That doesn‚Äôt mean honey cured that person‚Äôs cancer, and even if it did, it doesn‚Äôt mean that it would be likely to cure cancer in you. 6.2 Descriptive analysis Bring over PowerPoint and all the Rmd files from last year‚Äôs course. "],
["appendix-a-style-guide.html", "Appendix A: Style Guide Other syntax elements Managing multiple files in projects Saving images", " Appendix A: Style Guide Good coding style is like using correct punctuation. You can manage without it, but it sure makes things easier to read. As with styles of punctuation, there are many possible variations‚Ä¶ Good style is important because while your code only has one author, it‚Äôll usually have multiple readers. This is especially true when you‚Äôre writing code with others. In that case, it‚Äôs a good idea to agree on a common style up-front. Since no style is strictly better than another, working with others may mean that you‚Äôll need to sacrifice some preferred aspects of your style. 2 This appendix outlines the style that I, and my collaborators, typically use when writing R code for a research project. Generally speaking, I follow the Tidyverse style guide with a few tweaks that are listed below. Outside of my classes, you don‚Äôt have to use my style, but you really should find or create a style that works for you and your collaborators and use it consistently. File Names The Tidyverse style guide says that, ‚ÄúFile names should be meaningful and end in .R.‚Äù Just to be clear, this does not apply to file types other than R scripts. For example, R markdown files (.Rmd) and R data files (.Rds). In addition to the file name guidance given in The Tidyverse style guide, I suggest the following file naming conventions. Use all lowercase Use a single word when it makes sense Separate multiple words with underscores (this is in The Tidyverse style guide) Match the script/Rmd name with the name of the RData file it creates # One word admissions.R admissions.Rmd admissions.Rds # Multiple words weekly_recruiting_goals.R weekly_recruiting_goals.Rmd weekly_recruiting_goals.Rds Why use underscores in file names? Generally, in the computer science and IT worlds, it is typically frowned on when files, web addresses - or really any kind of programming at all - are named with spaces inside of the title. The reasoning behind this is very simple. Empty space signifies the ‚Äúend‚Äù of a character string. Spaces inside of a URL or a linked file basically generate a faulty syntax that the server reads as the end of a character string. The server sees ‚Äúthe end‚Äù and stops processing. When the full string is not processed, it can not be properly represented on your computer screen. 3 If files need to be run in sequence, prefix them with numbers: 01_download.R 02_parse.R 03_explore.R Variable (object) names Similar to file naming guidelines above, and to The Tidyverse style guide, object names should Use all lowercase Use a single word when it makes sense - Generally, variable names should be nouns and function names should be verbs Separate multiple words with underscores - In addition to the reasons for using underscores given above, using underscores instead of periods in your object names will make your code more transportable to other statistical programs (e.g., SAS &amp; Stata) that don‚Äôt allow periods Match the data frame name with the name of the RData file you are saving it in. summary_stats summary_stats.Rds Other syntax elements For all other syntax elements (i.e., spacing, function calls, control flow, long lines, semicolons, assignment, data, comments, functions, pipes, and ggplot2) please follow the the Tidyverse style guide - syntax, the Tidyverse style guide - funtions, the Tidyverse style guide - pipes, and the Tidyverse style guide - ggplot2. Managing multiple files in projects When you are doing data management and analysis for a real-world project you will typically need to break the code up into multiple files. If not, the code often becomes really difficult to read and manage. Having said that, finding the code you are looking for when there are 10, 20, or more separate files isn‚Äôt much fun either. Therefore, I suggest the following (or similar) file naming conventions be used in your projects. Separate data cleaning and data analysis into separate files (typically, .R or .Rmd). Data cleaning files should be prefixed with the word ‚Äúdata‚Äù and named as follows data_[order number]_[purpose] Example: data_03_prep_for_regression.Rmd Analysis files that do not directly create a table or figure should be prefixed with the word ‚Äúanalysis‚Äù and named as follows analysis_[order number]_[brief summary of content] Example: analysis_01_exploratory Analysis files that DO directly create a table or figure should be prefixed with the word ‚Äútable‚Äù or ‚Äúfig‚Äù respectively and named as follows table_[brief summary of content] or fig_[brief summary of content] Example: table_network_characteristics Images Should typically be png (especially when they are intended for use HTML files). Should typically be saved to a separate ‚Äúimg‚Äù folder under the project home directory. Should be given a descriptive name. Example: histogram_heights.png, NOT fig_02.png. Word and pdf files should be saved to a separate ‚Äúdocs‚Äù folder under the project home directory and given a descriptive name. Data files (i.e., RDS, RData, CSV, Excel, etc.) should typically be saved to a separate data folder under the project home directory and given a descriptive name. Note on You can do data manipulation (create variables, subset data, reshape data) in an analysis file if that analysis (table or chart) is the only analysis that uses the modified data. Otherwise, the modifications should be done in a separate R script saved in the data folder. Saving images I have found that the following image sizes typically work pretty well. 1920 x 1080 for HTML 770 x 360 for Word References "],
["appendix-b-glossary.html", "Appendix B: Glossary", " Appendix B: Glossary Console. Coming soon. Data frame. For our purposes, data frames are just R‚Äôs term for data set or data table. Data frames are made up of columns (variables) and rows (observations). In R, all columns of a data frame must have the same length. Functions. Coming soon. Arguments: Arguments always go inside the parentheses of a function and give the function the information it needs to give us the result we want. Pass: In programming lingo, you pass a value to a function argument. For example, in the funtion call seq(from = 2, to = 100, by = 2) we could say that we passed a value of 2 to the from argument, we passed a value of 100 to the to argument, and we passed a value of 2 to the by argument. Returns: Instead of saying, ‚Äúthe seq() function gives us a sequence of numbers‚Ä¶‚Äù we could say, ‚Äúthe seq() function returns us a sequence of numbers‚Ä¶‚Äù In programming lingo, functions return one or more results. Global environment. Coming soon. Objects. Coming soon. R. R is an integrated suite of software facilities for data manipulation, calculation and graphical display. R is very much a vehicle for newly developing methods of interactive data analysis. It has developed rapidly and has been extended by a large collection of packages. However, most programs written in R are essentially ephemeral, written for a single piece of data analysis. 4 R markdown documents. R markdown documents are text files that can be used to clean and analyze your data interactively as well as share your final results in many different formats (e.g., Microsoft Word, PDF, and even websites). R markdown documents weave together R code, narrative text, and multimedia content together into a polished final product. 5 RStudio. RStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management. RStudio is available in open source and commercial editions and runs on the desktop (Windows, Mac, and Linux) or in a browser connected to RStudio Server or RStudio Server Pro (Debian/Ubuntu, Red Hat/CentOS, and SUSE Linux). 6 "]
]
