[
["index.html", "R for Epidemiology Welcome", " R for Epidemiology Brad Cannell 2020-05-14 Welcome Welcome to R for Epidemiology! This electronic book was originally created to accompany my Introduction to R Programming for Epidemiologic Research course at the University of Texas Health Science Center School of Public Health. However, I hope it will be useful to anyone who is interested in R and epidemiology. This book was created by Brad Cannell and is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. Other Reading You may also be interested in: Hands-on Programming with R by Garrett Grolemund. This book is designed to provide a friendly introduction to the R language. R for Data Science by Garrett Grolemund and Hadley Wickham. This book is designed to teach readers how to do data science with R. Statistical Inference via Data Science: A ModernDive inot R and the Tidyverse. This book is designed to be a gentle introduction to the practice of analyzing data and answering questions using data the way data scientists, statisticians, data journalists, and other researchers would. Reproducable Research with R and RStudio by Christopher Gandrud. This book gives you tools for data gathering, analysis, and presentation of results so that you can create dynamic and highly reproducible research. Advanced R by Hadley Wickham. This book is designed primarily for R users who want to improve their programming skills and understanding of the language. "],
["about-the-author.html", "About the Author", " About the Author Brad Cannell, PhD, MPH Associate Professor Department of Epidemiology, Human Genetics and Environmental Sciences University of Texas Health Science Center School of Public Health Dr. Cannell received his PhD in Epidemiology, and Graduate Certificate in Gerontology, in 2013 from the University of Florida. He received his MPH with a concentration in Epidemiology from the University of Louisville in 2009, and his BA in Political Science and Marketing from the University of North Texas in 2005. During his doctoral studies, he was a Graduate Research Assistant for the Florida Office on Disability and Health, an affiliated scholar with the Claude D. Pepper Older Americans Independence Center, and a student-inducted member of the Delta Omega Honorary Society in Public Health. In 2016, Dr. Cannell received a Graduate Certificate in Predictive Analytics from the University of Maryland University College, and a Certificate in Big Data and Social Analytics from the Massachusetts Institute of Technology. He previously held professional staff positions in the Louisville Metro Health Department and the Northern Kentucky Independent District Health Department. He spent three years as a project epidemiologist for the Florida Office on Disability and Health at the University of Florida. He also served as an Environmental Science Officer in the United States Army Reserves from 2009 to 2013. Dr. Cannell’s research is broadly focused on healthy aging and health-related quality of life. Specifically, he has published research focusing on preservation of physical and cognitive function, living and aging with disability, and understanding and preventing elder mistreatment. Additionally, he has a strong background and training in epidemiologic methods and predictive analytics. He has been principal or co-investigator on multiple trials and observational studies in community and healthcare settings. He is currently the principal investigator on multiple data-driven federally funded projects that utilize technological solutions to public health issues in novel ways. Contact Email Brad Cannell Brad Cannell’s LinkedIn Profile Brad Cannell’s Github page "],
["introduction.html", "1 Introduction", " 1 Introduction Goals I’m going to start the introduction by writing down some basic goals that underlie the construction and content of this book. I’m writing this for you, the reader, but also to hold myself accountable as I write. So, feel free to read if you are interested or skip ahead if you aren’t. The goals of this book are: To teach you how to use R and RStudio as tools for applied epidemiology. It is not to turn you into a computer scientist or a hard-core R programmer. Therefore, some readders who are experienced programmers may catch some technical inacuracies on what I consider to be the fine points of what R is doing “under the hood.” To make this writing as accessible and practically useful as possible without stripping out all of the complexity that makes doing epidemiology in real life a challenge. In other words, I’m going to try to give you all the tools you need to do epidemiology in “real world” (as opposed to ideal) conditions without providing a whole bunch of extraneous (often theoretical) stuff that detracts from doing. Having said that, I will strive to add links to the other (often theoretical) stuff for readers who are interested. To teach you to accomplish common tasks, rather than teach you to use functions. In many R courses and texts, I’ve noticed a focus on learning all the things a function, or set of related functions, can do. It’s then up to you, the reader, to sift through all of these capabilities and decided which, if any, of the things that can be done will accomplish the tasks that you are actually trying to accomplish. Instead, I will strive to start with the end in mind. What is the task we are actually trying to accomplish? What are some functions/methods I could use to accomplish that task? What are the strengths and limitations of each? To start each concept with the end result and then deconstruct how we arrived at that result, where possible. I find that it is easier for me to understand new concepts when learning them as a component of a final product. To learn concepts with data instead of (or alongside) mathematical formulas and text descriptions, where possible. I find that it is easier for me to understand new concepts by seeing them in action. Text conventions used in this book Bold text is used to highlight important terms, URLs, email addresses, filenames, and file extensions. Highlighted inline code is used to emphasize small sections of R code, program elements such as variable or function names, databases, data types, environment variables, statements, and keywords. "],
["installing-r-and-rstudio.html", "2 Installing R and RStudio 2.1 Download and install on a Mac 2.2 Download and install on a PC", " 2 Installing R and RStudio Before we can do any programming with R, we first have to download it to your computer. Fortunately, R is free, easy to install, and runs on all major operating systems (i.e., Mac and Windows). However, R by itself is not nearly as easy to use as when we combine it with another program called RStudio. Fortunately, RStudio is also free and will also run on all major operating systems. At this point, you may be wondering what R is, what RStudio is, and how they are related. We will answer those questions in the near future. However, in the interest of keeping things brief and simple, I’m not going to get into them right now. Instead, all you have to worry about is getting the R programming language and the RStudio IDE (IDE is short for interactive development environment) downloaded and installed on your computer. The steps involved are slightly different depending on whether you are using a Mac or a PC (i.e., Windows). Therefore, please feel free to use the navigation panel on the left-hand side of the screen to navigate directly to the instructions that you need for your computer. Important note: In this chapter, I cover how to download and install R and RStudio on both Mac and PC. However, I personally use a Mac; therefore, the screenshots in all following chapters will be from a Mac. The good news is that RStudio operates almost identically on Mac and PC. Step 1: Regardless of which operating system you are using, please make sure your computer is on, properly functioning, connected to the internet, and has enough space on your hard drive to save R and RStudio. 2.1 Download and install on a Mac Step 2: Navigate to the Comprehensive R Archive Network (CRAN), which is located at https://cran.r-project.org/. Step 3: Click on Download R for (Mac) OS X. Step 4: Click on the link for the latest version of R. As you are reading this, the newest version may be different than the version you see in this picture, but the location of the newest version should be roughly in the same place – the middle of the screen under “Latest release:”. After clicking the link, R should start to download to your computer automatically. Step 5: Locate the package file you just downloaded and double click it. Unless you’ve changed your download settings, this file will probably be in your “downloads” folder. That is the default location for most web browsers. After you locate the file, just double click it. Step 6: A dialogue box will open and ask you to make some decisions about how and where you want to install R on your computer. I typically just click “continue” at every step without changing any of the default options. If R installed properly, you should now see it in your applications folder. Step 7: Now we need to install the RStudio IDE. To do this, navigate to the RStudio desktop download website, which is located at https://rstudio.com/products/rstudio/download/. On that page, click the download button under RStudio Desktop Open Source License Free. Step 8: Download the most current version for Mac. Step 9: Again, locate the dmg file you just downloaded and double click it. Unless you’ve changed your download settings, this file should be in the same location as the R package file you already downloaded. Step 10: A new finder window should automatically pop up that looks like the one you see here. Click on the RStudio icon and drag it into the Applications folder. You should now see RStudio in your Applications folder. Double click the icon to open RStudio. If this warning pops up, just click Open. The RStudio IDE should open and look something like the window you see here. If so, you are good to go! 🎉 2.2 Download and install on a PC Step 2: Navigate to the Comprehensive R Archive Network (CRAN), which is located at https://cran.r-project.org/. Step 3: Click on Download R for Windows. Step 4: Click on the base link. Step 5: Click on the link for the latest version of R. As you are reading this, the newest version may be different than the version you see in this picture, but the location of the newest version should be roughly the same. After clicking, R should start to download to your computer. Step 6: Locate the installation file you just downloaded and double click it. Unless you’ve changed your download settings, this file will probably be in your downloads folder. That is the default location for most web browsers. Step 7: A dialogue box will open that asks you to make some decisions about how and where you want to install R on your computer. I typically just click “Next” at every step without changing any of the default options. If R installed properly, you should now see it in the Windows start menu. Step 8: Now we need to install the RStudio IDE. To do this, navigate to the RStudio desktop download website, which is located at https://rstudio.com/products/rstudio/download/. On that page, click the download button under RStudio Desktop Open Source License Free. Step 9: Download the most current version for Windows. Step 10: Again, locate the installation file you just downloaded and double click it. Unless you’ve changed your download settings, this file should be in the same location as the R installation file you already downloaded. Step 11: Another dialogue box will open and ask you to make some decisions about how and where you want to install RStudio on your computer. I typically just click “Next” at every step without changing any of the default options. When RStudio is finished installing, you should see RStudio in the Windows start menu. Click the icon to open RStudio. The RStudio IDE should open and look something like the window you see here. If so, you are good to go! 🎉 "],
["what-is-r.html", "3 What is R? 3.1 What is data? 3.2 What is R?", " 3 What is R? At this point in the book, you should have installed R and RStudio on your computer, but you may be thinking to yourself, “I don’t even know what R is.” Well, in this chapter you’ll find out. I’ll start with an overview of the R language, and then briefly touch on its capabilities and uses. You’ll also see a complete R program and some complete documents generated by R programs. In this book you’ll learn how to create similar programs and documents, and by the end of the book you’ll be able to write your own R programs and present your results in the form of an issue brief written for general audiences who may or may not have public health expertise. But, before we discuss R let’s discuss something even more basic – data. Here’s a question for you: What is data? 3.1 What is data? Data is information about objects (e.g., people, places, schools) and observable phenomenon (e.g., weather, temperatures, and disease symptoms) that is recorded and stored somehow as a collection of symbols, numbers, and letters. So, data is just information that has be “written” down. Here we have a table, which is a common way of organizing data. In R, we will typically refer to these tables as data frames. Each box is a data frame is called a cell. Moving from left to right across the data frame are columns. Columns are also sometimes referred to as variables. In this book, we will often use the terms columns and variables interchangeably. Each column in a data frame has one, and only one, type. For now, know that the type tells us what kind of data is contained in a column and what we can do with that data. You may have already noticed that 3 of the columns in the table we’ve been looking at contain numbers and 1 of the columns contains words. These columns will have different types in R and we can do different things with them based on their type. For example, we could ask R to tell us what the average value of the numbers in the height column are, but it wouldn’t make sense to ask R to tell us the average value of the words in the Gender column. We will talk more about many of the different column types exist in R later in this book. The information contained in the first cell of each column is called the column name (or variable) name. R gives us a lot of flexibility in terms of what we can name our columns, but there are a few rules. Column names can contain letters, numbers and the dot (.) or underscore (_) characters. Additionally, they can begin with a letter or a dot – as long as the dot is not followed by a number. So, a name like “.2cats” is not allowed. Finally, R has some reserved words that you are not allowed to use for column names. These include: “if”, “else”, “repeat”, “while”, “function”, “for”, “in”, “next”, and “break”. Moving from top to bottom across the table are rows, which are sometimes referred to as records. Finally, the contents of each cell are called values. You should now be up to speed on some basic terminology used by R, as well as other analytic, database, and spreadsheet programs. These terms will be used repeatedly throughout the course. 3.2 What is R? So, what is R? Well, R is an open source statistical programming language that was created in the 1990’s specifically for data analysis. We will talk more about what open source means later, but for now, just think of R as an easy (relatively 😂) way to ask your computer to do math and statistics for you. More specifically, by the end of this book you will be able to independently use R to access data, manage data, analyze data, and present the results of your analysis. Let’s quickly take a closer look at each of these. 3.2.1 Accessing data So, what do we mean by “access data”? Well, individuals and organizations store their data using different computer programs that use different file types. Some common examples that you may come across in epidemiology are database files, spreadsheets, raw data files, and SAS data sets. No matter how the data is stored, you can’t do anything with it until you can get it into R, in a form that R can use, and in a location that you can reach. In other words, accessing your data. Therefore, among our first tasks in this course will be to access data. 3.2.2 Managing data This isn’t very specific, but managing data is all the things you may have to do to your data to get it ready for analysis. You may also hear people refer to this process as data wrangling or data munging. Some specific examples of data management tasks include: Validating and cleaning data. In other words, dealing with potential errors in the data. Subsetting data. For example, using only some of the columns or some of the rows. Creating new variables. For example, creating a BMI variable in a data frame that was sent to you with height and weight columns. Combining data frames. For example, combining sociodemographic data about study participants with data collected in the field during an intervention. You may sometimes hear people refer to the 80/20 rule in reference to data management. This “rule” says that in a typical data analysis project, roughly 80% of your time will be spent on data management and only 20% will be spent on the analysis itself. I can’t provide you with any empirical evidence (i.e., data) to back this claim up. But, as a person who has been involved in many projects that involve the collection and analysis of data, I can tell you anecdotally that this ”rule” is probably pretty close to being accurate in most cases. Additionally, it’s been my experience that most students of epidemiology are required to take one or more classes that emphasize methods for analyzing data; however, almost none of them have taken a course that emphasizes data management! Therefore, because data management is such a large component of most projects that involve the collection and analysis of data, and because most readers will have already been exposed to data analysis to a much greater extent than data management, this course will heavily emphasize the latter. 3.2.3 Analyzing data As just discussed, this is probably the capability you most closely associate with R, and there is no doubt that R is a powerful tool for analyzing data. However, in this book we won’t go beyond using R to calculate basic descriptive statistics. For our purposes, descriptive statistics include: Measures of central tendency. For example, mean, median, and mode. Measures of dispersion. For example, variance and standard error. Measures for describing categorical variables. For example, counts and percentages. Describing data using graphs and charts. With R, we can describe our data using beautiful and informative graphs. 3.2.4 Presenting data And finally, the ultimate goal is typically to present your findings in some form or another. For example, a report, a website, or a journal article. With R you can present your results in many different formats with relative ease. In fact, this is one of my favorite things about R and RStudio. In this class you will learn how to take your text, tabular, or graphical results and then publish them in many different formats including Microsoft Word, html files that can be viewed in web browsers, and pdf documents. Let’s take a look at some examples. Microsoft Word documents. Click here to view an example report created for one of my research projects in Microsoft Word. PDF documents. Click here to view a data dictionary I created in PDF format. HTML files. Hypertext Markup Language (HTML) files are what you are looking at whenever you view a webpage. You can use are to create HTML files that others can view in their web browser. You can email them these files to view in their web browser, or you can make them available for others to view online just like any other website. Click here to view an example dashboard I created for one of my research projects. Web applications. You can even use R to create full-fledged web applications. View the RStudio website to see some examples. "],
["speaking-rs-language.html", "4 Speaking R’s language", " 4 Speaking R’s language Here’s how to speak it… "],
["navigating-the-rstudio-interface.html", "5 Navigating the RStudio interface", " 5 Navigating the RStudio interface Here’s how to navigate it… "],
["lets-get-programming.html", "6 Let’s get programming", " 6 Let’s get programming Let’s do it! "],
["asking-questions.html", "7 Asking questions", " 7 Asking questions Use a repex, please! "],
["overview.html", "8 Overview 8.1 Measurement 8.2 Descriptive analysis", " 8 Overview 8.1 Measurement Measurement: We typically evaluate and quantify our intuition about health and disease with numbers. This could be relative to anecdotes. Surely, the one person who happened to survive cancer through a diet exclusively of honey could have had an article written about them. That doesn’t mean honey cured that person’s cancer, and even if it did, it doesn’t mean that it would be likely to cure cancer in you. 8.2 Descriptive analysis Bring over PowerPoint and all the Rmd files from last year’s course. "],
["appendix-a-style-guide.html", "Appendix A: Style Guide Other syntax elements Managing multiple files in projects Saving images", " Appendix A: Style Guide Good coding style is like using correct punctuation. You can manage without it, but it sure makes things easier to read. As with styles of punctuation, there are many possible variations… Good style is important because while your code only has one author, it’ll usually have multiple readers. This is especially true when you’re writing code with others. In that case, it’s a good idea to agree on a common style up-front. Since no style is strictly better than another, working with others may mean that you’ll need to sacrifice some preferred aspects of your style. 1 This appendix outlines the style that I, and my collaborators, typically use when writing R code for a research project. Generally speaking, I follow the Tidyverse style guide with a few tweaks that are listed below. Outside of my classes, you don’t have to use my style, but you really should find or create a style that works for you and your collaborators and use it consistently. File Names The Tidyverse style guide says that, “File names should be meaningful and end in .R.” Just to be clear, this does not apply to file types other than R scripts. For example, R markdown files (.Rmd) and R data files (.Rds). In addition to the file name guidance given in The Tidyverse style guide, I suggest the following file naming conventions. Use all lowercase Use a single word when it makes sense Separate multiple words with underscores (this is in The Tidyverse style guide) Match the script/Rmd name with the name of the RData file it creates # One word admissions.R admissions.Rmd admissions.Rds # Multiple words weekly_recruiting_goals.R weekly_recruiting_goals.Rmd weekly_recruiting_goals.Rds Why use underscores in file names? Generally, in the computer science and IT worlds, it is typically frowned on when files, web addresses - or really any kind of programming at all - are named with spaces inside of the title. The reasoning behind this is very simple. Empty space signifies the “end” of a character string. Spaces inside of a URL or a linked file basically generate a faulty syntax that the server reads as the end of a character string. The server sees “the end” and stops processing. When the full string is not processed, it can not be properly represented on your computer screen. 2 If files need to be run in sequence, prefix them with numbers: 01_download.R 02_parse.R 03_explore.R Variable (object) names Similar to file naming guidelines above, and to The Tidyverse style guide, object names should Use all lowercase Use a single word when it makes sense - Generally, variable names should be nouns and function names should be verbs Separate multiple words with underscores - In addition to the reasons for using underscores given above, using underscores instead of periods in your object names will make your code more transportable to other statistical programs (e.g., SAS &amp; Stata) that don’t allow periods Match the data frame name with the name of the RData file you are saving it in. summary_stats summary_stats.Rds Other syntax elements For all other syntax elements (i.e., spacing, function calls, control flow, long lines, semicolons, assignment, data, comments, functions, pipes, and ggplot2) please follow the the Tidyverse style guide - syntax, the Tidyverse style guide - funtions, the Tidyverse style guide - pipes, and the Tidyverse style guide - ggplot2. Managing multiple files in projects When you are doing data management and analysis for a real-world project you will typically need to break the code up into multiple files. If not, the code often becomes really difficult to read and manage. Having said that, finding the code you are looking for when there are 10, 20, or more separate files isn’t much fun either. Therefore, I suggest the following (or similar) file naming conventions be used in your projects. Separate data cleaning and data analysis into separate files (typically, .R or .Rmd). Data cleaning files should be prefixed with the word “data” and named as follows data_[order number]_[purpose] Example: data_03_prep_for_regression.Rmd Analysis files that do not directly create a table or figure should be prefixed with the word “analysis” and named as follows analysis_[order number]_[brief summary of content] Example: analysis_01_exploratory Analysis files that DO directly create a table or figure should be prefixed with the word “table” or “fig” respectively and named as follows table_[brief summary of content] or fig_[brief summary of content] Example: table_network_characteristics Images Should typically be png (especially when they are intended for use HTML files). Should typically be saved to a separate “img” folder under the project home directory. Should be given a descriptive name. Example: histogram_heights.png, NOT fig_02.png. Word and pdf files should be saved to a separate “docs” folder under the project home directory and given a descriptive name. Data files (i.e., RDS, RData, CSV, Excel, etc.) should typically be saved to a separate data folder under the project home directory and given a descriptive name. Note on You can do data manipulation (create variables, subset data, reshape data) in an analysis file if that analysis (table or chart) is the only analysis that uses the modified data. Otherwise, the modifications should be done in a separate R script saved in the data folder. Saving images I have found that the following image sizes typically work pretty well. 1920 x 1080 for HTML 770 x 360 for Word References "],
["appendix-b-glossary.html", "Appendix B: Glossary", " Appendix B: Glossary R. Programming language. RStudio. IDE for R. "]
]
