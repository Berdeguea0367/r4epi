[["importing-binary-files.html", "15 Importing binary files 15.1 Packages for importing data 15.2 Importing Microsoft Excel spreadsheets 15.3 Importing data from other statistical analysis software 15.4 Importing SAS data sets 15.5 Importing Stata data sets", " 15 Importing binary files In the last chapter we learned that there are many different file types that one can use to store data. We also learned how to use the readr package to import several different variations of plain text files into R. In this chapter, we will focus on data stored in binary files. Again, you can think of binary files as being more complex than plain text files and accessing the information in binary files requires the use of special software. Some examples of binary files that I have frequently seen used in epidemiology include Microsoft Excel spreadsheets, SAS data sets, and Stata data sets. Below, we will learn how to import all three file types into R. 15.1 Packages for importing data Technically, base R does not contain any functions that can be used to import the binary file types discussed above. However, the foreign package contains functions that may be used to import SAS data sets and Stata data sets, and is installed by default when you install R on your computer. Having said that, we aren‚Äôt going to use the foreign package in this chapter. Instead, we‚Äôre going to use the following packages to import data in the examples below. If you haven‚Äôt done so already, I suggest that you go ahead and install these packages now. readxl. We will use the readxl package to import Microsoft Excel files. haven. We will use the haven package to import SAS and Stata data sets. library(readxl) library(haven) 15.2 Importing Microsoft Excel spreadsheets I‚Äôm probably sent data in Microsoft Excel files more than any other file format. Fortunately, the readxl package makes it really easy to import Excel spreadsheets into R. And, because that package is maintained by the same people who create the readr package that you have already seen, I think it‚Äôs likely that the readxl package will feel somewhat familiar right from the start. I would be surprised if any of you had never seen an Excel spreadsheet before ‚Äì they are pretty ubiquitous in the modern world ‚Äì but I‚Äôll go ahead and show a screenshot of our height and weight data in Excel for the sake of completeness. All we have to do to import this spreadsheet into R as a data frame is passing the path to the excel file to the path argument of the read_excel() function. You may click here to download this file to your computer. excel &lt;- read_excel(&quot;data/excel.xlsx&quot;) excel ## # A tibble: 4 √ó 4 ## ID sex ht_in wgt_lbs ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 001 Male 71 190 ## 2 002 Male 69 176 ## 3 003 Female 64 130 ## 4 004 Female 65 154 üëÜHere‚Äôs what we did above: We used readxl‚Äôs read_excel() function to import a Microsoft Excel spreadsheet. That spreadsheet was imported as a data frame and we assigned that data frame to the R object called excel. ‚ö†Ô∏èWarning: Make sure to always include the file extension in your file paths. For example, using ‚Äú/excel‚Äù instead of ‚Äú/excel.xlsx‚Äù above (i.e., no .xlsx) would have resulted in an error telling you that the filed does not exist. Fortunately for us, just passing the Excel file to the read_excel() function like this will usually ‚Äújust work.‚Äù But, let‚Äôs go ahead and simulate another situation that is slightly more complex. Once again, we‚Äôve received data from a team that is using Microsoft Excel to capture some study data. As you can see, this data looks very similar to the csv file we previously imported. However, it looks like the study team has done a little more formatting this time. Additionally, they‚Äôve added a couple of columns we haven‚Äôt seen before ‚Äì date of birth and annual household income. As a final little wrinkle, the data for this study is actually the second sheet in this Excel file (also called a workbook). The study team used the first sheet in the workbook as a data dictionary that looks like this: Once again, we will have to deal with some of the formatting that was done in Excel before we can analyze our data in R. You may click here to download this file to your computer. We‚Äôll start by taking a look at the result we get when we try to pass this file to the read_excel() function without changing any of read_excel()‚Äôs default values. excel &lt;- read_excel(&quot;data/excel_complex.xlsx&quot;) ## New names: ## ‚Ä¢ `` -&gt; `...2` ## ‚Ä¢ `` -&gt; `...3` ## # A tibble: 8 √ó 3 ## `Height and Weight Study\\r\\nData Dictionary` ...2 ...3 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 Variable Definition Type ## 3 Study ID Randomly assigned participant id Continuous ## 4 Assigned Sex at Birth Sex the participant was assigned at birth Dichotomous ‚Ä¶ ## 5 Height (inches) Participant&#39;s height in inches Continuous ## 6 Weight (lbs) Participant&#39;s weight in pounds Continuous ## 7 Date of Birth Participant&#39;s date of birth Date ## 8 Annual Household Income Participant&#39;s annual household income from all sources Continuous (‚Ä¶ And, as I‚Äôm sure you saw coming, this isn‚Äôt the result we wanted. However, we can get the result we wanted by making a few tweaks to the default values of the sheet, col_names, col_types, skip, and na arguments of the read_excel() function. excel &lt;- read_excel( path = &quot;data/excel_complex.xlsx&quot;, sheet = &quot;Study Phase 1&quot;, col_names = c(&quot;id&quot;, &quot;sex&quot;, &quot;ht_in&quot;, &quot;wgt_lbs&quot;, &quot;dob&quot;, &quot;income&quot;), col_types = c( &quot;text&quot;, &quot;text&quot;, &quot;numeric&quot;, &quot;numeric&quot;, &quot;date&quot;, &quot;numeric&quot;, &quot;skip&quot; ), skip = 3, na = c(&quot;&quot;, &quot;NA&quot;, &quot;Missing&quot;) ) excel ## # A tibble: 4 √ó 6 ## id sex ht_in wgt_lbs dob income ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; ## 1 001 Male 71 190 1981-05-20 00:00:00 46000 ## 2 002 Male NA 176 1990-08-16 00:00:00 67000 ## 3 003 Female 64 130 1980-02-21 00:00:00 49000 ## 4 004 Female 65 NA 1983-04-12 00:00:00 89000 As I said, the readr package and readxl package were developed by the same people. So, the code above looks similar to the code we used to import the csv file in the previous chapter. Therefore, I‚Äôm not going to walk through this code step-by-step. Rather, I‚Äôm just going to highlight some of the slight differences. You can type ?read_excel into your R console to view the help documentation for this function and follow along with the explanation below. The first argument to the read_excel() function is the path argument. It serves the same purpose as the file argument to read_csv() ‚Äì it just has a different name. The sheet argument to the read_excel() function tells R which sheet of the Excel workbook contains the data you want to import. In this case, the study team named that sheet ‚ÄúStudy Phase 1‚Äù. We could have also passed the value 2 to the sheet argument because ‚ÄúStudy Phase 1‚Äù is the second sheet in the workbook. However, I suggest using the sheet name. That way, if the study team sends you a new Excel file next week with different ordering, you are less likely to accidently import the wrong data. The value we pass to the col_types argument is now a vector of character strings instead of a list of functions nested in the col() function. The values that the col_types function will accept are \"skip\" for telling R to ignore a column in the spreadsheet, \"guess\" for telling R to guess the variable type, \"logical\" for logical (TRUE/FALSE) variables, ‚Äúnumeric‚Äù for numeric variables, \"date\" for date variables, \"text\" for character variables, and \"list\" for everything else. Notice that we told R to import income as a numeric variable. This caused the commas and dollar signs to be dropped. We did this because keeping the commas and dollar signs would have required us to make income a character variable (numeric variables can only include numbers). If we had imported income as a character variable, we would have lost the ability to perform mathematical operations on it. Remember, it makes no sense to ‚Äúadd‚Äù two words together. Later, I will show you how to add dollar signs and commas back to the numeric values if you want to display them in your final results. We used the col_names, skip, and na arguments in exactly the same way we used them in the read_csv function. You should be able to import most of the data stored in Excel spreadsheets with just the few options that we discussed above. However, there may be times were importing spreadsheets is even more complicated. If you find yourself in that position, I suggest that you first check out the readxl website here. 15.3 Importing data from other statistical analysis software Many applications designed for statistical analysis allow you to save data in a binary format. One reason for this is that binary data formats allow you to save metadata alongside your data values. Metadata is data about the data. Using our running example, the data is about the heights, weights, and other characteristics of our study participants. Metadata about this data might include information like when this data set was created, or value labels that make the data easier to read (e.g., the dollar signs in the income variable). In my experience, you are slightly more likely to have problems importing binary files saved from other statistical analysis applications than plain text files. Perhaps because they are more complex, the data just seems to become corrupt and do other weird things more often than is the case with plain text files. However, in my experience, it is also the case that when we are able to import binary files created in other statistical analysis applications, doing so requires less adjusting of default values. In fact, we will usually only need to pass the file path to the correct read_ function. Below, we will see some examples of importing binary files saved in two popular statistical analysis applications ‚Äì SAS and Stata. We will use the haven package to import both. 15.4 Importing SAS data sets SAS actually allows users to save data in more than one type of binary format. Data can be saved as SAS data sets or as SAS Transport files. SAS data set file names end with the .sas7bdat file extension. SAS Transport file file names end with the .xpt file extension. In order to import a SAS data set, we typically only need to pass the correct file path to haven‚Äôs read_sas() function. You may click here to download this file to your computer. sas &lt;- read_sas(&quot;data/height_and_weight.sas7bdat&quot;) sas ## # A tibble: 4 √ó 4 ## ID sex ht_in wgt_lbs ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 001 Male 71 190 ## 2 002 Male 69 176 ## 3 003 Female 64 130 ## 4 004 Female 65 154 üëÜHere‚Äôs what we did above: We used haven‚Äôs read_sas() function to import a SAS data set. That data was imported as a data frame and we assigned that data frame to the R object called sas. In addition to SAS data sets, data that has been altered in SAS can also be saved as a SAS transport file. Some of the national, population-based public health surveys (e.g., BRFSS and NHANES) make their data publicly available in this format. You can download the 2018 BRFSS data as a SAS Transport file here. About halfway down the webpage, there is a link that says, ‚Äú2018 BRFSS Data (SAS Transport Format)‚Äù. Clicking that link should download the data to your computer. Notice that the SAS Transport file is actually stored inside a zip file. You can unzip the file first if you would like, but you don‚Äôt even have to do that. Amazingly, you can pass the path to the zipped .xpt file directly to the read_xpt() function like so: brfss_2018 &lt;- read_xpt(&quot;data/LLCP2018XPT.zip&quot;) head(brfss_2018) ## # A tibble: 6 √ó 275 ## `_STATE` FMONTH IDATE IMONTH IDAY IYEAR DISPCODE SEQNO `_PSU` CTELE‚Ä¶¬π PVTRE‚Ä¶¬≤ COLGH‚Ä¶¬≥ STATE‚Ä¶‚Å¥ CELLF‚Ä¶‚Åµ LADULT ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 01052018 01 05 2018 1100 20180‚Ä¶ 2.02e9 1 1 NA 1 2 NA ## 2 1 1 01122018 01 12 2018 1100 20180‚Ä¶ 2.02e9 1 1 NA 1 2 NA ## 3 1 1 01082018 01 08 2018 1100 20180‚Ä¶ 2.02e9 1 1 NA 1 2 NA ## 4 1 1 01032018 01 03 2018 1100 20180‚Ä¶ 2.02e9 1 1 NA 1 2 NA ## 5 1 1 01122018 01 12 2018 1100 20180‚Ä¶ 2.02e9 1 1 NA 1 2 NA ## 6 1 1 01112018 01 11 2018 1100 20180‚Ä¶ 2.02e9 1 1 NA 1 2 NA ## # ‚Ä¶ with 260 more variables: NUMADULT &lt;dbl&gt;, NUMMEN &lt;dbl&gt;, NUMWOMEN &lt;dbl&gt;, SAFETIME &lt;dbl&gt;, CTELNUM1 &lt;dbl&gt;, ## # CELLFON5 &lt;dbl&gt;, CADULT &lt;dbl&gt;, PVTRESD3 &lt;dbl&gt;, CCLGHOUS &lt;dbl&gt;, CSTATE1 &lt;dbl&gt;, LANDLINE &lt;dbl&gt;, HHADULT &lt;dbl&gt;, ## # GENHLTH &lt;dbl&gt;, PHYSHLTH &lt;dbl&gt;, MENTHLTH &lt;dbl&gt;, POORHLTH &lt;dbl&gt;, HLTHPLN1 &lt;dbl&gt;, PERSDOC2 &lt;dbl&gt;, MEDCOST &lt;dbl&gt;, ## # CHECKUP1 &lt;dbl&gt;, EXERANY2 &lt;dbl&gt;, SLEPTIM1 &lt;dbl&gt;, CVDINFR4 &lt;dbl&gt;, CVDCRHD4 &lt;dbl&gt;, CVDSTRK3 &lt;dbl&gt;, ASTHMA3 &lt;dbl&gt;, ## # ASTHNOW &lt;dbl&gt;, CHCSCNCR &lt;dbl&gt;, CHCOCNCR &lt;dbl&gt;, CHCCOPD1 &lt;dbl&gt;, HAVARTH3 &lt;dbl&gt;, ADDEPEV2 &lt;dbl&gt;, CHCKDNY1 &lt;dbl&gt;, ## # DIABETE3 &lt;dbl&gt;, DIABAGE2 &lt;dbl&gt;, LASTDEN4 &lt;dbl&gt;, RMVTETH4 &lt;dbl&gt;, SEX1 &lt;dbl&gt;, MARITAL &lt;dbl&gt;, EDUCA &lt;dbl&gt;, ## # RENTHOM1 &lt;dbl&gt;, NUMHHOL3 &lt;dbl&gt;, NUMPHON3 &lt;dbl&gt;, CPDEMO1B &lt;dbl&gt;, VETERAN3 &lt;dbl&gt;, EMPLOY1 &lt;dbl&gt;, ‚Ä¶ üëÜHere‚Äôs what we did above: We used haven‚Äôs read_xpt() function to import a zipped SAS Transport File. That data was imported as a data frame and we assigned that data frame to the R object called brfss_2018. Because this is a large data frame (437,436 observations and 275 variables), we used the head() function to print only the first 6 rows of the data to the screen. But, this demonstration actually gets even cooler. Instead of downloading the SAS Transport file to our computer before importing it, we can actually sometimes import files, including SAS Transport files, directly from the internet. For example, you can download the 2017-2018 NHANES demographic data as a SAS Transport file here If you right-click on the link that says, ‚ÄúDEMO_I Data [XPT - 3.3 MB]‚Äù, you will see an option to copy the link address. Click ‚ÄúCopy Link Address‚Äù and then navigate back to RStudio. Now, all you have to do is paste that link address where you would normally type a file path into the read_xpt() function. When you run the code chunk, the read_xpt() function will import the NHANES data directly from the internet (assuming you are connected to the internet). üò≤ nhanes_demo &lt;- read_xpt(&quot;https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/DEMO_J.XPT&quot;) head(nhanes_demo) ## # A tibble: 6 √ó 46 ## SEQN SDDSRVYR RIDSTATR RIAGENDR RIDAGEYR RIDAG‚Ä¶¬π RIDRE‚Ä¶¬≤ RIDRE‚Ä¶¬≥ RIDEX‚Ä¶‚Å¥ RIDEX‚Ä¶‚Åµ DMQMI‚Ä¶‚Å∂ DMQADFC DMDBO‚Ä¶‚Å∑ DMDCI‚Ä¶‚Å∏ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 93703 10 2 2 2 NA 5 6 2 27 NA NA 1 1 ## 2 93704 10 2 1 2 NA 3 3 1 33 NA NA 1 1 ## 3 93705 10 2 2 66 NA 4 4 2 NA 2 NA 1 1 ## 4 93706 10 2 1 18 NA 5 6 2 222 2 NA 1 1 ## 5 93707 10 2 1 13 NA 5 7 2 158 NA NA 1 1 ## 6 93708 10 2 2 66 NA 5 6 2 NA 2 NA 2 1 ## # ‚Ä¶ with 32 more variables: DMDYRSUS &lt;dbl&gt;, DMDEDUC3 &lt;dbl&gt;, DMDEDUC2 &lt;dbl&gt;, DMDMARTL &lt;dbl&gt;, RIDEXPRG &lt;dbl&gt;, ## # SIALANG &lt;dbl&gt;, SIAPROXY &lt;dbl&gt;, SIAINTRP &lt;dbl&gt;, FIALANG &lt;dbl&gt;, FIAPROXY &lt;dbl&gt;, FIAINTRP &lt;dbl&gt;, MIALANG &lt;dbl&gt;, ## # MIAPROXY &lt;dbl&gt;, MIAINTRP &lt;dbl&gt;, AIALANGA &lt;dbl&gt;, DMDHHSIZ &lt;dbl&gt;, DMDFMSIZ &lt;dbl&gt;, DMDHHSZA &lt;dbl&gt;, ## # DMDHHSZB &lt;dbl&gt;, DMDHHSZE &lt;dbl&gt;, DMDHRGND &lt;dbl&gt;, DMDHRAGZ &lt;dbl&gt;, DMDHREDZ &lt;dbl&gt;, DMDHRMAZ &lt;dbl&gt;, ## # DMDHSEDZ &lt;dbl&gt;, WTINT2YR &lt;dbl&gt;, WTMEC2YR &lt;dbl&gt;, SDMVPSU &lt;dbl&gt;, SDMVSTRA &lt;dbl&gt;, INDHHIN2 &lt;dbl&gt;, INDFMIN2 &lt;dbl&gt;, ## # INDFMPIR &lt;dbl&gt;, and abbreviated variable names ¬π‚ÄãRIDAGEMN, ¬≤‚ÄãRIDRETH1, ¬≥‚ÄãRIDRETH3, ‚Å¥‚ÄãRIDEXMON, ‚Åµ‚ÄãRIDEXAGM, ## # ‚Å∂‚ÄãDMQMILIZ, ‚Å∑‚ÄãDMDBORN4, ‚Å∏‚ÄãDMDCITZN üëÜHere‚Äôs what we did above: We used haven‚Äôs read_xpt() function to import a SAS Transport File directly from the NHANES website. That data was imported as a data frame and we assigned that data frame to the R object called nhanes_demo. Because this is a large data frame (9,254 observations and 46 variables), we used the head() function to print only the first 6 rows of the data to the screen. 15.5 Importing Stata data sets Finally, we will import a Stata data set (.dta) to round out our discussion of importing data from other statistical analysis software packages. There isn‚Äôt much of anything new here ‚Äì you could probably have even guessed how to do this without me showing you. You may click here to download this file to your computer. stata &lt;- read_stata(&quot;data/height_and_weight.dta&quot;) stata ## # A tibble: 4 √ó 4 ## ID sex ht_in wgt_lbs ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 001 Male 71 190 ## 2 002 Male 69 176 ## 3 003 Female 64 130 ## 4 004 Female 65 154 üëÜHere‚Äôs what we did above: We used haven‚Äôs read_stata() function to import a Stata data set. That data was imported as a data frame and we assigned that data frame to the R object called stata. You now know how to write code that will allow you to import data stored in all of the file formats that we will use in this book, and the vast majority of formats that you are likely to encounter in your real-world projects. In the next section, I will introduce you to a tool in RStudio that makes importing data even easier. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
